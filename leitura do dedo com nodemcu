#include "ESP8266WiFi.h" 
#include <Wire.h>
#include "MAX30100_PulseOximeter.h" //biblioteca do oximetro/BPM
#include "MAX30100.h" //biblioteca do oximetro/BPM
#include <PubSubClient.h> //biblioteca MQTT

MAX30100 sensor;

#define REPORTING_PERIOD_MS     1000

//Variaveis de rede
char mqtt_server [30];
char mqtt_port [6];
char id_leito [20];
const char* ssid = "Trojan.exe";
const char* password = "200smt200";
//Variaveis para o sensor oximetro
float BatimentoCache = 0;
float BatimentoCache2 = 0;

#define mqtt_server "192.168.88.254" // endereço do servidor zabbix
#define mqtt_user "your_username"
#define mqtt_password "your_password"
#define id_leito "leito01" // Nome do item zabbix
#define mqtt_port "1883" // Porta do SERVER MQTT

WiFiClient espClient;
PubSubClient client(espClient); 

PulseOximeter pox;

uint32_t tsLastReport = 0;

// Callback (registered below) fired when a pulse is detected
void onBeatDetected()
{
    Serial.println("RUSBÉ! ");
    //Acende o led
  digitalWrite(D5, HIGH);
   
  //Aguarda o intervalo especificado
  delay(1);
   
  //Apaga o led
  digitalWrite(D5, LOW);
   
  //Aguarda o intervalo especificado
  delay(1);
}

void setup()
{
      Serial.begin(115200);
      pinMode(D5, OUTPUT);

    Serial.printf("Connecting to %s ", ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println(" connected");
  Serial.print ("conectando na rede local: "); //print na Serial da mensagem: Conectado na  !
  Serial.println (ssid); //print na serial o nome da rede
  Serial.print ("IP: "); //
  Serial.println(WiFi.localIP()); //print na Serial do IP que o dispositivo pegou na rede
  Serial.println();
  
  //inicio mqtt client
  int mqtt_port_b;
  mqtt_port_b = atoi(mqtt_port);
  Serial.println("o valor do ip server:");
  Serial.println(mqtt_server);
  Serial.println("o valor da porta:");
  Serial.println(mqtt_port_b);
  Serial.println("o valor do id do leito:");
  Serial.println(id_leito);
  Serial.println("Atribuindo Valores ao servidor mqtt:");
  client.setServer(mqtt_server, mqtt_port_b);
  Serial.println("Valores Atribuidos:");

    Serial.print("Initializing pulse oximeter..");

    // Initialize the PulseOximeter instance
    // Failures are generally due to an improper I2C wiring, missing power supply
    // or wrong target chip
    if (!pox.begin()) {
        Serial.println("FAILED");
        for(;;);
    } else {
        Serial.println("SUCCESS");
    }

    // The default current for the IR LED is 50mA and it could be changed
    //   by uncommenting the following line. Check MAX30100_Registers.h for all the
    //   available options.
    pox.setIRLedCurrent(MAX30100_LED_CURR_30_6MA);

    // Register a callback for the beat detection
    pox.setOnBeatDetectedCallback(onBeatDetected);
}

void loop()
{
     pox.update();
     if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
        Serial.print("Batimento: ");
        Serial.print(pox.getHeartRate());
        String bpm = (".bpm");
        String keyleito = id_leito + bpm;
        client.publish(String(keyleito).c_str(), String(pox.getHeartRate()).c_str(), true);
        Serial.print("bpm / Oxigenação SpO2: ");
        Serial.print(pox.getSpO2());
        String SpO2 = (".SpO2");
        String keyleito2 = id_leito + SpO2; 
        client.publish(String(keyleito2).c_str(), String(pox.getSpO2()).c_str(), true);
        Serial.println("% ");
        tsLastReport = millis();            
}                  

          while (!client.connected()) {
          Serial.print("Attempting MQTT connection...");
          if (client.connect("ESP8266Client", mqtt_user, mqtt_password)) {
          Serial.println("connected");
          
          Serial.print("Initializing pulse oximeter..");

          // Initialize the PulseOximeter instance
          // Failures are generally due to an improper I2C wiring, missing power supply
          // or wrong target chip
          if (!pox.begin()) {
              Serial.println("FAILED");
              for(;;);
          } else {
              Serial.println("SUCCESS");
          }
          }
          }
}                       
