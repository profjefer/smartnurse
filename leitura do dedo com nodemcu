#include "MAX30100_PulseOximeter.h"
#include "ESP8266WiFi.h"

#include <Wire.h>
#include <PubSubClient.h> // Importa a Biblioteca PubSubClient


#define REPORTING_PERIOD_MS     1000

char mqtt_server [30];
char mqtt_port [6];
char id_leito [20];
#define mqtt_server "10.10.100.11"
#define mqtt_user "your_username"
#define mqtt_password "your_password"
#define id_leito "leito01"
#define mqtt_port "1883"

////////////////////////
// wifi estatico

const char* ssid = "Trojan.exe";
const char* password = "200smt200";


WiFiClient espClient;
PubSubClient client(espClient); 

// PulseOximeter is the higher level interface to the sensor
// it offers:
//  * beat detection reporting
//  * heart rate calculation
//  * SpO2 (oxidation level) calculation
PulseOximeter pox;


uint32_t tsLastReport = 0;

// Callback (registered below) fired when a pulse is detected
void onBeatDetected()
{
    Serial.println("Beat!");
}

void setup()
{

  Serial.begin(115200);

////////////////
// wifi estatico
////////////////
  
    Serial.printf("Connecting to %s ", ssid);

  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED)
  {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println(" connected");
  Serial.print ("conectando na rede local: "); //print na Serial da mensagem: Conectado na  !
  Serial.println (ssid); //print na serial o nome da rede
  Serial.print ("IP: "); //
  Serial.println(WiFi.localIP()); //print na Serial do IP que o dispositivo pegou na rede
  Serial.println();
  
  //inicio mqtt client
  int mqtt_port_b;
  mqtt_port_b = atoi(mqtt_port);
  Serial.println("o valor do ip server:");
  Serial.println(mqtt_server);
  Serial.println("o valor da porta:");
  Serial.println(mqtt_port_b);
  Serial.println("o valor do id do leito:");
  Serial.println(id_leito);
  Serial.println("Atribuindo Valores ao servidor mqtt:");
  client.setServer(mqtt_server, mqtt_port_b);
  Serial.println("Valores Atribuidos:");
  

    // Initialize the PulseOximeter instance and register a beat-detected callback
    pox.begin();
    pox.setOnBeatDetectedCallback(onBeatDetected);

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
      //Serial.print("Attempting MQTT connection...");
      //Serial.println(mqtt_server);
      //Serial.println(mqtt_port_b);
      //Serial.println(id_unidade);
    // Attempt to connect
    // If you do not want to use a username and password, change next line to
    // if (client.connect("ESP8266Client")) {
    if (client.connect("ESP8266Client", mqtt_user, mqtt_password)) {
      //Serial.println("connected");
    } else {
      //Serial.print("falha na conexao, rc= ");
      //Serial.println(mqtt_server);
      //Serial.println(mqtt_port_b);
      //Serial.println(id_unidade);
      //Serial.print(client.state());
      //Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}




void loop()
{


//WiFiClient client;

  if (!client.connected()) {
    reconnect();
  }
  
    // Make sure to call update as fast as possible
    pox.update();

    // Asynchronously dump heart rate and oxidation levels to the serial
    // For both, a value of 0 means "invalid"
    if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
        Serial.print("Heart rate:");
        Serial.print(pox.getHeartRate());
        Serial.print("bpm / SpO2:");
        Serial.print(pox.getSpO2());
        Serial.println("%");

        tsLastReport = millis();

        String bpm = (".bpm");
        String keyleito = id_leito + bpm;

        String SpO2 = (".SpO2");
        String keyleito2 = id_leito + SpO2;


        if (!client.connected()) {
          reconnect();
          
          }
          
          client.publish(String(keyleito).c_str(), String(pox.getHeartRate()).c_str(), true);
          client.publish(String(keyleito2).c_str(), String(pox.getSpO2()).c_str(), true);
    }
}
